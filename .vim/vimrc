" *********
" Structure
" *********
"
" * Plugins
"
"   * Initialization
"
"     * CSS
"     * HTML
"     * Python
"     * RST
"
"   * Settings
"
"     * Ack
"     * Airline
"     * AutoPairs
"     * ChallengerDeep
"     * CtrlP
"     * GitGutter
"     * NERDCommenter
"     * NERDTree
"     * NERDTreeTabs
"     * PythonMode
"     * Riv
"     * Syntastic
"     * Tagbar
"     * UltiSnips
"     * YouCompleteMe
"
" * Vim
"
"   * Clipboard
"   * Commands
"   * Folding
"   * Keyboard
"   * Indentation
"   * Search
"   * Swaps
"   * Whitespaces
"   * Window

" Plugins
" =======

" Initialization
" --------------

call plug#begin('~/.vim/plugged')

Plug 'dhruvasagar/vim-table-mode'

Plug 'airblade/vim-gitgutter'
Plug 'challenger-deep-theme/vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'easymotion/vim-easymotion'
Plug 'jiangmiao/auto-pairs', {'commit': '3bd07a4'}
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Konfekt/FastFold'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'ycm-core/YouCompleteMe', {'do': 'python3 install.py'}
Plug 'vim-airline/vim-airline'
Plug 'vim-syntastic/syntastic'
Plug 'Xuyuanp/nerdtree-git-plugin'

" CSS
" ^^^

Plug 'ap/vim-css-color'
Plug 'hail2u/vim-css3-syntax'

" HTML
" ^^^^

Plug 'alvan/vim-closetag'
Plug 'mattn/emmet-vim'
Plug 'othree/html5.vim'
Plug 'valloric/matchtagalways'
Plug 'vim-scripts/matchit.zip'

" Python
" ^^^^^^

Plug 'python-mode/python-mode'

" RST
" ^^^

Plug 'Rykka/instantrst'
Plug 'Rykka/riv.vim'

call plug#end()

" Settings
" --------

" Ack
" ^^^

if executable('rg')
  let g:ackprg = 'rg --vimgrep'
endif

" do not jump immediately to the first result

cnoreabbrev rg Ack!
nnoremap <Leader>r :Ack!<Space>

" split windows like splitbelow and splitright

let g:ack_mappings = {
    \ "h": "<C-W><CR>:exe 'wincmd ' (&splitbelow ? 'J' : 'K')<CR><C-W>p<C-W>J<C-W>p",
    \ "H": "<C-W><CR>:exe 'wincmd ' (&splitbelow ? 'J' : 'K')<CR><C-W>p<C-W>J",
    \ "v": "<C-W><CR>:exe 'wincmd ' (&splitright ? 'L' : 'H')<CR><C-W>p<C-W>J<C-W>p",
    \ "gv": "<C-W><CR>:exe 'wincmd ' (&splitright ? 'L' : 'H')<CR><C-W>p<C-W>J" }

" Airline
" ^^^^^^^

set laststatus=2

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" AutoPairs
" ^^^^^^^^^

let g:AutoPairsShortcutToggle='<F4>'

" ChallengerDeep
" ^^^^^^^^^^^^^^

set termguicolors

colorscheme challenger_deep

highlight LineNr ctermfg=253 guifg=#cbe3e7

" CtrlP
" ^^^^^

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" GitGutter
" ^^^^^^^^^

set updatetime=250

" NERDCommenter
" ^^^^^^^^^^^^^

let g:NERDDefaultAlign = 'left'

let g:NERDCommentEmptyLines = 1
let g:NERDCompactSexyComns = 1
let g:NERDSpaceDelims = 1
let g:NERDToggleCheckAllLines = 1
let g:NERDTrimTrailingWhitespace = 1

let g:NERDCustomDelimiters = {'python': {'left': '#'}}

" NERDTree
" ^^^^^^^^

let NERDTreeRespectWildIgnore = 1
let NERDTreeShowHidden = 1
let NERDTreeShowLineNumbers = 1

autocmd FileType nerdtree setlocal relativenumber

set wildignore+=build
set wildignore+=.coverage
set wildignore+=dist
set wildignore+=*.egg-info
set wildignore+=.git
set wildignore+=.mypy_cache
set wildignore+=__pycache__
set wildignore+=.pytest_cache

" open NERDTree if directory specified as argument to Vim

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" NERDTreeTabs
" ^^^^^^^^^^^^

nnoremap <C-m> :NERDTreeFocusToggle<CR>
nnoremap <C-n> :NERDTreeMirrorToggle<CR>

" PythonMode
" ^^^^^^^^^^

let g:pymode_lint = 0
let g:pymode_rope = 0
let g:pymode_virtualenv = 0

" Riv
" ^^^

let g:riv_disable_indent = 1
let g:riv_fold_info_pos = 'left'
let g:riv_fold_level = 1
let g:riv_section_levels = '*=-^"'''
let g:riv_link_cursor_hl = 0

" Syntastic
" ^^^^^^^^^

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 5

let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_html_checkers = ['tidy']
let g:syntastic_markdown_checkers = ['mdl']
let g:syntastic_python_checkers = ['flake8']
" let g:syntastic_rst_checkers = ['sphinx']
let g:syntastic_rst_checkers = []

nnoremap <F3> :SyntasticCheck<CR>
nnoremap <C-X> :SyntasticReset<CR>

" close quick window with buffer at once

cabbrev <silent> bd <C-r>=(getcmdtype()==#':' && getcmdpos()==1 ? 'lclose\|bdelete' : 'bd')<CR>

" Tagbar
" ^^^^^^

nnoremap <F2> :TagbarOpenAutoClose<CR>

" UltiSnips
" ^^^^^^^^^

let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-l>"
let g:UltiSnipsJumpBackwardTrigger="<C-h>"

let g:UltiSnipsEditSplit="horizontal"
let g:UltiSnipsSnippetsDir="~/.vim/snippets"

" YouCompleteMe
" ^^^^^^^^^^^^^

let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_complete_in_strings = 0
let g:ycm_filetype_whitelist = {'python': 1}
let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_python_binary_path = 'python3'

nnoremap <leader>d :YcmCompleter GetDoc<CR>
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>n :YcmCompleter GoToReferences<CR>

" Vim
" ===

" Clipboard
" ---------

set clipboard=unnamedplus

" Commands
" --------

cnoreabbrev Bd bd
cnoreabbrev Q q
cnoreabbrev Qa qall
cnoreabbrev W w
cnoreabbrev Wa wall
cnoreabbrev Wq wq
cnoreabbrev Wqa wqall

" Folding
" -------

" no fold closed on start

set foldlevelstart=99

" Keyboard
" --------

" speed up ESC to NORMAL mode

set timeoutlen=1000 ttimeoutlen=0

" Indentation
" -----------

set expandtab

set shiftwidth=4
set softtabstop=4

autocmd Filetype html setlocal shiftwidth=2 softtabstop=2
autocmd Filetype css setlocal shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2
autocmd FileType json setlocal shiftwidth=2 softtabstop=2
autocmd FileType rst setlocal shiftwidth=3 softtabstop=3
autocmd FileType sh setlocal shiftwidth=2 softtabstop=2
autocmd FileType yaml setlocal shiftwidth=2 softtabstop=2

" Mouse
" -----

set mouse=a

" Search
" ------

set hlsearch
set ignorecase
set incsearch
set smartcase

nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" Swaps
" -----

set directory=~/.vim/swaps//

" Whitespaces
" -----------

set nojoinspaces
set selection=exclusive

highlight ExtraWhitespace ctermbg=red guibg=red

match ExtraWhitespace /\s\+$/

autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Window
" ------

set number relativenumber
set colorcolumn=80

set nowrap

set splitbelow
set splitright

set nostartofline

autocmd InsertEnter * set norelativenumber
autocmd InsertLeave * set relativenumber

set maxmempattern=2000

" Tab-mode

autocmd Filetype markdown let g:table_mode_corner='|'
let g:table_mode_corner='|'
